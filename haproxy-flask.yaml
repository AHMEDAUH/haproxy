---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
data:
  haproxy.cfg: |
    global
        daemon
        maxconn 256

    defaults
        mode http
        timeout connect 5000ms
        timeout client  50000ms
        timeout server  50000ms

    frontend http-in
        bind *:80
        default_backend flask-backend

    backend flask-backend
        server flask-api flask-api-service:5000 check

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
      - name: haproxy
        image: haproxy:2.9
        ports:
        - containerPort: 80
        volumeMounts:
        - name: haproxy-config-volume
          mountPath: /usr/local/etc/haproxy/haproxy.cfg
          subPath: haproxy.cfg
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: haproxy-config-volume
        configMap:
          name: haproxy-config

---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-service
spec:
  selector:
    app: haproxy
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-api
  template:
    metadata:
      labels:
        app: flask-api
    spec:
      containers:
      - name: flask
        image: python:3.11-slim
        ports:
        - containerPort: 5000
        command: ["sh", "-c"]
        args:
          - |
            pip install flask flask-restful && \
            echo "
            from flask import Flask
            from flask_restful import Resource, Api

            app = Flask(__name__)
            api = Api(app)

            class HelloWorld(Resource):
                def get(self):
                    return {'message': 'Hello from Flask!'}

            api.add_resource(HelloWorld, '/')

            if __name__ == '__main__':
                app.run(host='0.0.0.0', port=5000)
            " > app.py && python app.py

---
apiVersion: v1
kind: Service
metadata:
  name: flask-api-service
spec:
  selector:
    app: flask-api
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
