# === Bootstrap Kafka (TLS only, no SASL) ===
bootstrap.servers=kafka1.mydomain:9093,kafka2.mydomain:9093
security.protocol=SSL
ssl.endpoint.identification.algorithm=https
# Si certificats self-signed (non TRUSTED), il faut ajouter :
# ssl.truststore.location=/etc/kafka/secrets/truststore.jks
# ssl.truststore.password=CHANGE_ME

# === Connect cluster identity ===
group.id=connect-cluster
config.storage.topic=connect-configs
offset.storage.topic=connect-offsets
status.storage.topic=connect-status
config.storage.replication.factor=3
offset.storage.replication.factor=3
status.storage.replication.factor=3
# Si votre cluster a un facteur <3 en dev, ajustez à 1

# === REST API ===
rest.port=8083
# rest.advertised.host.name=0.0.0.0

# === Converters (Avro + Schema Registry TLS) ===
key.converter=io.confluent.connect.avro.AvroConverter
value.converter=io.confluent.connect.avro.AvroConverter
key.converter.schema.registry.url=SCHEMA_REGISTRY_URL
value.converter.schema.registry.url=SCHEMA_REGISTRY_URL
# Pour SR en TLS trusted, rien à ajouter ; sinon :
# schema.registry.ssl.truststore.location=/etc/kafka/secrets/truststore.jks
# schema.registry.ssl.truststore.password=CHANGE_ME

# === Internal topics cleanup ===
offset.flush.interval.ms=10000

# === Plugin path (confluent-hub) ===
plugin.path=/usr/share/confluent-hub-components,/usr/share/java

# === Producer/Consumer/Admin clients (TLS propagation) ===
producer.security.protocol=SSL
consumer.security.protocol=SSL
admin.security.protocol=SSL
producer.ssl.endpoint.identification.algorithm=https
consumer.ssl.endpoint.identification.algorithm=https
admin.ssl.endpoint.identification.algorithm=https

# === Optional stability tweaks ===
# consumer.max.poll.interval.ms=300000
# consumer.session.timeout.ms=45000
# request.timeout.ms=40000
# heartbeat.interval.ms=10000
