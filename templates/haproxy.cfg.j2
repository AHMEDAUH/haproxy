global
    log {{ haproxy_log_file }} local0
    log {{ haproxy_log_file }} local1 notice
    chroot {{ haproxy_install_dir }}
    user {{ haproxy_user }}
    group {{ haproxy_group }}
    daemon
    stats socket {{ haproxy_socket }} mode 660 level admin
    stats timeout 30s
    ca-base {{ haproxy_ssl_dir }}

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms

{% if haproxy_stats.enabled %}
# Frontend pour les statistiques
frontend stats_frontend
    bind *:{{ haproxy_stats.port }}
    stats enable
    stats uri {{ haproxy_stats.uri }}
    stats realm "HAProxy Statistics"
    stats auth {{ haproxy_stats.auth.username }}:{{ haproxy_stats.auth.password }}
    stats hide-version  # Masquer la version de HAProxy pour des raisons de sécurité
    stats refresh 10s   # Rafraîchir les statistiques toutes les 10 secondes
    stats show-legends  # Afficher les légendes des statistiques
{% endif %}

{% for error_page in haproxy_error_pages %}
errorfile {{ error_page.code }} {{ error_page.file }}
{% endfor %}

{% for rate_limit in haproxy_rate_limits %}
# Stick table pour la limitation de requêtes par adresse IP
stick-table type ip size 100k expire {{ rate_limit.period }} store http_req_rate({{ rate_limit.period }})
{% endfor %}

{% for frontend in haproxy_frontends %}
frontend {{ frontend.name }}
    bind *:{{ frontend.port }}{% if frontend.ssl %} ssl {% for cert in frontend.ssl_certs %}crt {{ cert }} {% endfor %}ca-file {{ frontend.ssl_ca }} verify required ssl-min-ver TLSv1.2 ssl-max-ver TLSv1.3{% endif %}

    {% if frontend.ssl %} 
    # Désactiver les protocoles obsolètes
    no-sslv3
    no-tlsv10
    no-tlsv11
    # Configurer une suite de chiffrement moderne
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    redirect scheme https code 301 if !{ ssl_fc }
    {% endif %}


    {% if frontend.acls is defined and frontend.acls %}  # Vérifier si des ACLs sont définies
    {% for acl in frontend.acls %}
    acl {{ acl.name }} {{ acl.condition }}  # Définir les ACLs
    {% endfor %}

    # Règles pour choisir le backend en fonction des ACLs
    {% if frontend.name == "frontend_app1" %}
    use_backend api_back if is_api  # Utiliser le backend api_back si l'ACL is_api est vraie
    use_backend {{ frontend.backend }} if is_app1  # Utiliser le backend app1_back si l'ACL is_app1 est vraie
    {% elif frontend.name == "frontend_app2" %}
    use_backend {{ frontend.backend }} if is_app2  # Utiliser le backend app2_back si l'ACL is_app2 est vraie
    {% endif %}
    {% endif %}

    default_backend {{ frontend.backend }}  # Backend par défaut

    # Limitation de la taille du payload
    http-request deny deny_status 413 if { req.body_size gt {{ haproxy_max_payload_size }} }

    {% for rate_limit in haproxy_rate_limits %}
    {% if rate_limit.frontend == frontend.name %}
    # Limitation de requêtes par adresse IP
    acl rate_limit_exceeded sc0_http_req_rate({{ rate_limit.frontend }}) gt {{ rate_limit.limit }}
    http-request track-sc0 src table {{ rate_limit.frontend }}
    http-request deny deny_status 429 if rate_limit_exceeded
    {% endif %}
    {% endfor %}
{% endfor %}

{% for backend in haproxy_backends %}
backend {{ backend.name }}
    balance {{ backend.balance_algorithm }}

    {% if backend.sticky_sessions %}  # Activer la persistance de session si nécessaire
    cookie {{ backend.cookie_name }} insert indirect nocache
    {% endif %}

    {% for server in backend.servers %}
    server {{ server.name }} {{ server.address }} check {% if backend.sticky_sessions %}cookie {{ server.name }}{% endif %}
    {% endfor %}
{% endfor %}