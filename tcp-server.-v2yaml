apiVersion: v1
kind: Namespace
metadata:
  name: tcp-test

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-server-script
  namespace: tcp-test
data:
  server.py: |
    import socket
    import threading

    HOST = '0.0.0.0'
    PORT = 9000

    def handle_client(conn, addr):
        print(f"[+] New connection from {addr}")
        with conn:
            while True:
                try:
                    data = conn.recv(1024)
                    if not data:
                        break
                    print(f"[{addr}] Received: {data.decode().strip()}")
                    conn.sendall(b'ACK\n')
                except ConnectionResetError:
                    print(f"[!] Connection reset by {addr}")
                    break
                except Exception as e:
                    print(f"[!] Error with {addr}: {e}")
                    break
        print(f"[-] Connection closed from {addr}")

    def start_server():
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
            server.bind((HOST, PORT))
            server.listen()
            print(f"[*] TCP server listening on {HOST}:{PORT}")
            while True:
                conn, addr = server.accept()
                thread = threading.Thread(target=handle_client, args=(conn, addr), daemon=True)
                thread.start()

    if __name__ == "__main__":
        start_server()

---
apiVersion: v1
kind: Pod
metadata:
  name: tcp-server
  namespace: tcp-test
  labels:
    app: tcp-server
spec:
  containers:
  - name: tcp-server
    image: python:3.9
    command: ["python", "/app/server.py"]
    volumeMounts:
    - name: script-volume
      mountPath: /app
  volumes:
  - name: script-volume
    configMap:
      name: tcp-server-script

---
apiVersion: v1
kind: Service
metadata:
  name: tcp-service
  namespace: tcp-test
spec:
  selector:
    app: tcp-server
  ports:
  - name: tcp
    port: 9000
    targetPort: 9000
    protocol: TCP
  type: ClusterIP
